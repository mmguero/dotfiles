########################################################################
# text processing
########################################################################
function cols () {
    first="awk '{print "
    last="}'"
    cmd="${first}"
    commatime=""
    for var in "$@"
    do
      if [ -z $commatime ]; then
        commatime="no"
        cmd=${cmd}\$${var}
      else
        cmd=${cmd}\,\$${var}
      fi
    done
    cmd="${cmd}${last}"
    eval $cmd
}

function headtail () {
  awk -v offset="$1" '{ if (NR <= offset) print; else { a[NR] = $0; delete a[NR-offset] } } END { { print "--------------------------------" } for (i=NR-offset+1; i<=NR; i++) print a[i] }' ;
}

function wait_file() {
  local file="$1"; shift
  local wait_seconds="${1:-10}"; shift # 10 seconds as default timeout

  until test $((wait_seconds--)) -eq 0 -o -f "$file" ; do sleep 1; done

  ((++wait_seconds))
}

function taildiff () {
  LEFT_FILE=$1
  RIGHT_FILE=$2
  RIGHT_LINES=$(wc -l "$RIGHT_FILE" | cut -d ' ' -f1)
  diff -bwBy --suppress-common-lines <(head -n $RIGHT_LINES "$LEFT_FILE") <(head -n $RIGHT_LINES "$RIGHT_FILE")
}

function dirdiff () {
  if [ -d "$1" ] && [ -d "$2" ]; then
    dir1="$1"
    dir2="$2"
    IFS=$'\n'
    for file in $(grep -Ilsr -m 1 '.' "$dir1"); do
      diff -q "$file" "${file/${dir1}/${dir2}}"
    done
  else
    echo "Must specify two directories">&2
  fi
}

function lin () {
  sed -n $1p
}

function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* ./*;
  fi;
}

function fsize () {
  echo "$1" | awk 'function human(x) {
     s=" B   KiB MiB GiB TiB EiB PiB YiB ZiB"
     while (x>=1024 && length(s)>1)
           {x/=1024; s=substr(s,5)}
     s=substr(s,1,4)
     xf=(s==" B  ")?"%5d   ":"%0.2f"
     return sprintf( xf"%s", x, s)
  }
  {gsub(/^[0-9]+/, human($1)); print}'
}

function multigrep() { local IFS='|'; grep -rinE "$*" . ; }

function ord() { printf "%d\n" "'$1"; }

function chr() { printf \\$(($1/64*100+$1%64/8*10+$1%8))\\n; }

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1");
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8";
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

function colors () {
  for i in {0..255}; do echo -e "\e[38;05;${i}m${i}"; done | column -c 80 -s '  '; echo -e "\e[m"
}

function uni () {
  for CHARSEARCH in "$@"; do
    lynx -dump "https://www.fileformat.info/info/unicode/char/search.htm?q=${CHARSEARCH}&preview=entity" | \
      \grep -oP "[\x{1f300}-\x{1f5ff}\x{1f900}-\x{1f9ff}\x{1f600}-\x{1f64f}\x{1f680}-\x{1f6ff}\x{2600}-\x{26ff}\x{2700}-\x{27bf}\x{1f1e6}-\x{1f1ff}\x{1f191}-\x{1f251}\x{1f004}\x{1f0cf}\x{1f170}-\x{1f171}\x{1f17e}-\x{1f17f}\x{1f18e}\x{3030}\x{2b50}\x{2b55}\x{2934}-\x{2935}\x{2b05}-\x{2b07}\x{2b1b}-\x{2b1c}\x{3297}\x{3299}\x{303d}\x{00a9}\x{00ae}\x{2122}\x{23f3}\x{24c2}\x{23e9}-\x{23ef}\x{25b6}\x{23f8}-\x{23fa}]" | \
      tr '\n' ' ' | fold -w 80 -s
      echo
  done
}

function humanhash () {
  python -c "import humanhash, sys; [print(humanhash.humanize(line.strip()) if all(c.lower() in '0123456789abcdef' for c in line.strip()) else f'\'{line.strip()}\\' is not a digest') for line in sys.stdin]"
}

########################################################################
# math
########################################################################
function calc () { python -c "from math import *; n = $1; print n; print '$'+hex(trunc(n))[2:]; print '&'+oct(trunc(n))[1:]; print '%'+bin(trunc(n))[2:];"; }

function add () {
  awk '{s+=$1} END {print s}'
  # alternately: paste -sd+ - | bc
}

########################################################################
# date/time
########################################################################
function dateu()
{
  if [ "$1" ]; then
    echo $(date -u -d @$1);
  else
    echo "No UNIX time specified">&2
  fi
}

function udate()
{
  if [ "$1" ]; then
    date -u +%s -d "$1"
  else
    date -u +%s
  fi
}

function sec2dhms() {
  if [ "$1" ]; then
    SECS="$1"
    printf '%02d:%02d:%02d\n' $(($SECS/3600)) $(($SECS%3600/60)) $(($SECS%60))
  else
    echo "00:00:00"
  fi
}

########################################################################
# directory navigation/file manipulation
########################################################################
function cd() { if [[ "$1" =~ ^\.\.+$ ]];then local a dir;a=${#1};while [ $a -ne 1 ];do dir=${dir}"../";((a--));done;builtin cd $dir;else builtin cd "$@";fi ;}

function fcd() { [ -f $1  ] && { cd $(dirname $1);  } || { cd $1 ; } }

function up { cd $(eval printf '../'%.0s {1..$1}) && pwd; }

function realpath {
  if [ $MACOS ]; then
    /usr/local/bin/realpath "$@"
  else
    readlink -f "$@"
  fi
}

function realgo() { fcd $(realpath $(which "$1" || echo "$1")) && pwd ; }

function realwhich() { realpath $(which $1) ; }

function renmod() {
  FILENAME="$@";
  TIMESTAMP=$(date -d @$(stat -c%Y "$FILENAME") +"%Y%m%d%H%M%S")
  mv -iv "$FILENAME" "$FILENAME.$TIMESTAMP"
}

function upto() {
  local EXPRESSION="$1"
  if [ -z "$EXPRESSION" ]; then
    echo "A folder expression must be provided." >&2
    return 1
  fi
  if [ "$EXPRESSION" = "/" ]; then
    cd "/"
    return 0
  fi
  local CURRENT_FOLDER="$(pwd)"
  local MATCHED_DIR=""
  local MATCHING=true

  while [ "$MATCHING" = true ]; do
    if [[ "$CURRENT_FOLDER" =~ "$EXPRESSION" ]]; then
      MATCHED_DIR="$CURRENT_FOLDER"
      CURRENT_FOLDER=$(dirname "$CURRENT_FOLDER")
    else
      MATCHING=false
    fi
  done
  if [ -n "$MATCHED_DIR" ]; then
    cd "$MATCHED_DIR"
    return 0
  else
    echo "No Match." >&2
    return 1
  fi
}

# complete upto
_upto () {
  # necessary locals for _init_completion
  local cur prev words cword
  _init_completion || return

  COMPREPLY+=( $( compgen -W "$( echo ${PWD//\// } )" -- $cur ) )
}
complete -F _upto upto

# count files matching a given wildcard expression (e.g., count ~/download/*)
function count() {
  test -e "$1" && echo "$#" || echo 0;
}

########################################################################
# history
########################################################################
function h() { if [ -z "$1" ]; then history; else history | grep -i "$@"; fi; }

########################################################################
# searching
########################################################################
function fname() { find . -iname "*$@*"; }

function findupes() {
  find . -not -empty -type f -printf "%s\n" 2>/dev/null | \
    sort -rn | \
    uniq -d | \
    xargs -I{} -n1 find -type f -size {}c -print0 | \
    xargs -0 md5sum | \
    sort | \
    uniq -w32 --all-repeated=separate
}

function sfind() {
  if [ "$1" ]; then
    FIND_FOLDER="$1"
  else
    FIND_FOLDER="$(pwd)"
  fi
  if [ "$2" ]; then
    FIND_PATTERN="$2"
  else
    FIND_PATTERN="*"
  fi
  find "$FIND_FOLDER" -type f -iname "$FIND_PATTERN" -print0 | xargs -r -0 ls -la | awk '{system("numfmt -z --to=iec-i --suffix=B --padding=7 "$5) ; out=""; for(i=9;i<=NF;i++){out=out" "$i}; print " KB\t"out}' | sort -h
}

########################################################################
# examine running processes
########################################################################
function aux() {
  ps aux | grep -i "$(echo "$1" | sed "s/^\(.\)\(.*$\)/\[\1\]\2/")"
}

function psgrep() {
  if [ ! $MACOS ]; then
    ps axuf | grep -v grep | grep "$@" -i --color=auto;
  else
    /usr/local/bin/psgrep "$@"
  fi
}

function killtree() {
  if [ "$1" ]; then
    kill $(pstree -p $1 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr "\n" " ")
  else
    echo "No PID specified">&2
  fi
}

function howmuchmem () {
  PROCNAME="$@";
  RAMKILOBYTES=($(ps axo rss,comm|grep $PROCNAME| awk '{ TOTAL += $1 } END { print TOTAL }'));
  RAMBYTES=$(echo "$RAMKILOBYTES*1024" | bc);
  RAM=$(fsize $RAMBYTES);
  echo "$RAM";
}

function mempercent () {
  PROCNAME="$@";
  ps -eo pmem,comm | grep "$PROCNAME" | awk '{sum+=$1} END {print sum " % of RAM"}'
}

function swapusage () {
  for file in /proc/*/status ; do awk '/VmSwap|Name/{printf $2 " " $3}END{ print ""}' $file; done | sort -k 2 -n -r  | head -n 20
}

function htopid () {
  PROCPID="$1"
  htop -p $(pstree -p $PROCPID | perl -ne 'push @t, /\((\d+)\)/g; END { print join ",", @t }')
}

function pidstart () {
  for PROC_PID in "$@"; do
    PROC_START_DATE_STR="$(ps -q $PROC_PID -o lstart=)"
    PROC_START_DATE_UNIX="$(date +%s -d "$PROC_START_DATE_STR")"
    NOW_DATE_UNIX="$(date +%s)"
    PROC_START_SECONDS_AGO=$((NOW_DATE_UNIX-PROC_START_DATE_UNIX))
    PROC_START_AGO="$(sec2dhms $PROC_START_SECONDS_AGO)"
    echo "$PROC_START_DATE_STR ($PROC_START_AGO ago)"
  done
}

########################################################################
# news/weather
########################################################################
function weather() {
  if [ "$1" ]; then
    CITY="$1"
  else
    CITY="83401"
  fi
  curl "wttr.in/$CITY"
}

########################################################################
# APT package management
########################################################################
function aptsearch() { apt-cache search "$1"; }

function aptsize() {
  dpkg-query --show --showformat='${Package;-50}\t${Installed-Size} ${Status}\n' | sort -k 2 -n | grep -v deinstall
}

########################################################################
# python package management
########################################################################
function pipup() {
  # make the second 3 to 2 for py2  V
  for MAJOR_VER in $(seq -s' ' 3 -1 3); do
    PIPBIN="pip${MAJOR_VER}"
    $PIPBIN list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -r -n1 $PIPBIN install -U
  done
}

########################################################################
# cert management
########################################################################

# Prior to using a step ca-issued SSH key, determine if it has expired
# and, if it has, attempt to re-issue a new key. Then proceed to
# execute "ssh" with the specified parameters.
function sshi () {

  # is the step CLI program available?
  if command -v step >/dev/null 2>&1; then

    PROVISIONER_ARG=
    if [ -n "$STEP_SSH_PROVISIONER" ]; then
      PROVISIONER_ARG="--provisioner=$STEP_SSH_PROVISIONER"
    fi

    # if command-line parameters were specified, treat the first one
    # as the name of the SSH key (e.g., id_ecdsa) only if it exists
    # and is readable, otherwise assume they are arguments for SSH.
    if [[ "$1" ]] && ( [[ -r "$1" ]] || [[ -r ~/.ssh/"$1" ]] ); then
      SSHKEYARG="$1"
      shift
    else
      SSHKEYARG="id_ecdsa"
    fi

    if [[ -n "$SSHKEYARG" ]]; then

      # either the key is in the current directory, or assume ~/.ssh/
      if [[ -r "$SSHKEYARG" ]]; then
        SSHKEY="$SSHKEYARG"
      elif [[ -r ~/.ssh/"$SSHKEYARG" ]]; then
        SSHKEY="$(realpath ~/.ssh/"$SSHKEYARG")"
      else
        SSHKEY=""
        echo "SSH key not found">&2
      fi

      # the SSH key public certificate is xxxx-cert.pub
      SSHCERT="${SSHKEY}-cert.pub"
      if [[ -r "$SSHCERT" ]]; then

        # determine the expiration date of the certificate and the current time, both in UTC seconds
        SSHEXPIRES="$(cat "$SSHCERT" 2>/dev/null | step ssh inspect 2>/dev/null | grep -P "^\s*Valid:" | sed "s/.* to //")"
        if [[ -n "$SSHEXPIRES" ]]; then
          SSHTIL="$(date -u -d "$SSHEXPIRES" +"%s")"
          NOWTIME="$(date -u +"%s")"

          # has the key expired?
          if (( $NOWTIME > $SSHTIL )); then

            # navigate to home of SSH key
            pushd "$(dirname "$SSHKEY")" >/dev/null 2>&1

            # extract Key ID and principals for reuse issuing a new key
            KEYID="$(cat "$SSHCERT" 2>/dev/null | step ssh inspect 2>/dev/null | grep -P "^\s*Key ID:" | cut -d: -f2 | sed 's/^[[:space:]]*"//g' | sed 's/"[[:space:]]*$//g')"
            if [[ -z $KEYID ]]; then
              KEYID="${USER}@$(hostname -A)"
            fi
            PRINCIPALS=()
            while IFS=  read -r -d $'\n'; do
              PRINCIPALS+=("--principal=$REPLY")
            done < <(cat "$SSHCERT" 2>/dev/null | step ssh inspect 2>/dev/null | sed -n "/^[[:space:]]*Principals:/,/Critical Options:/p" | sed '1d;$d' | sed 's/^[[:space:]]*//g')

            if (( ${#PRINCIPALS[*]} > 0 )); then
              # attempt to reissue the new SSH key from the CA and return to the previous location
              step ssh certificate --force $PROVISIONER_ARG ${PRINCIPALS[*]} "$KEYID" "$(basename "$SSHKEY")"
            else
              echo "could not determine SSH certificate principals">&2
            fi
            popd >/dev/null 2>&1

          fi # key expired check
        else
          echo "could not determine SSH certificate expiration">&2
        fi # expiration string exists check
      else
        echo "SSH certificate not found">&2
      fi # xxxx-cert.pub exists check
    else
      echo "No SSH key specified">&2
    fi # SSH key specified (or default) check
  else
    echo "The step CLI tool is not available">&2
  fi # step CLI tool available check

  # if there are further arguments, pass them along to ssh
  if (( $# > 0 )); then
    ssh "$@"
  fi
}

########################################################################
# network
########################################################################
function lport () {
  if [ "$1" ]; then
    netstat -anp 2>/dev/null|grep "$1"|grep LISTEN|awk '{print $4}'|grep -P -o "\d+"|grep -v "^0$"
  else
    echo "No process specified">&2
  fi
}

function i () {
  ip -c -br address show "$@"
}

function sshscr()
{
  if [ "$1" ]; then
    PNGNAME="sshscreencap_$(date +"%Y%m%d_%H%M%S").png"
    ssh "$@" 'DISPLAY=":0.0" import -window root png:-' > "$PNGNAME" && \
      echo "captured screenshot to \"$PNGNAME\"" || \
      rm -f "$PNGNAME" >/dev/null 2>&1
  else
    echo "No ssh parameters specified">&2
  fi
}

function pihole()
{
  ssh "$1" "pihole -c -e" 2>/dev/null && echo
}

function server()
{
    local PORT="${1:-8000}"
    sleep 1 && open "http://localhost:${PORT}/" &
    if command -v goStatic >/dev/null 2>&1; then
        goStatic -path "$(pwd)" -port $PORT
    elif command -v python3 >/dev/null 2>&1; then
        python3 -m http.server --bind 0.0.0.0 $PORT
    elif command -v python >/dev/null 2>&1; then
        python -m SimpleHTTPServer $PORT
    elif command -v ruby >/dev/null 2>&1; then
        ruby -run -e httpd -- --bind-address=0.0.0.0 --port=$PORT .
    elif command -v http-server >/dev/null 2>&1; then
        http-server -a 0.0.0.0 --port $PORT
    elif command -v php >/dev/null 2>&1; then
        php -S 0.0.0.0:$PORT -t .
    else
        echo "No tool available for service HTTP" >&2
    fi
}

function arps()
{
  /usr/sbin/arp -a | grep -v '^?' | cols 4 1 | sed "s/ /|/" | sed "s/$/|/"
}

function portping()
{
  CONN_TIMEOUT=5
  if [[ -n "$BASH_VERSION" ]] && [[ $LINUX ]]; then
    # use /dev/tcp
    timeout $CONN_TIMEOUT bash -c "cat /dev/null > /dev/tcp/$1/$2" && echo OPEN || echo CLOSED
  elif command -v python3 >/dev/null 2>&1; then
    # use python socket library
    python3 <<<"import socket; socket.setdefaulttimeout($CONN_TIMEOUT); socket.socket().connect(('$1', $2))" 2> /dev/null && echo OPEN || echo CLOSED
  elif command -v socat >/dev/null 2>&1; then
    # use socat
    socat /dev/null TCP4:"$1":"$2",connect-timeout="$CONN_TIMEOUT" >/dev/null 2>&1 && echo OPEN || echo CLOSED
  elif command -v nc >/dev/null 2>&1; then
    # use some flavor of netcat
    if ( nc -h 2>&1 | grep -q 'to somewhere' ); then
      # traditional
      ( timeout $((CONN_TIMEOUT+1)) bash -c "cat /dev/null | nc -v -w "$CONN_TIMEOUT" "$1" "$2" 2>&1" || true ) | grep -q 'open$' && echo OPEN || echo CLOSED
    elif ( nc 2>&1 | grep -q '46CDdFhklNnrStUuvZz' ); then
      # openbsd
      timeout $((CONN_TIMEOUT+1)) bash -c "cat /dev/null | nc -w "$CONN_TIMEOUT" "$1" "$2" >/dev/null 2>&1" && echo OPEN || echo CLOSED
    elif ( nc --help 2>&1 | grep -q 'Ncat' ); then
      # ncat
      timeout $CONN_TIMEOUT bash -c "cat /dev/null | nc -v --send-only "$1" "$2" >/dev/null 2>&1" && echo OPEN || echo CLOSED
    else
      echo UNKNOWN
    fi
  elif command -v telnet >/dev/null 2>&1; then
    # use telnet
    timeout $CONN_TIMEOUT bash -c "echo -e '\x1dclose\x0d' | telnet "$1" "$2" >/dev/null 2>&1" && echo OPEN || echo CLOSED
  else
    echo UNKNOWN
  fi
}

function tcpbytes()
{
  PCAPFILE="$1"
  FRAME="$2"
  tshark -r "$PCAPFILE" -e "tcp.payload" -Tfields -Y frame.number=="$FRAME" | sed "s/://g" | xxd -r -p
}

function worm()
{
  if [ -n "$WORMHOLE_TRANSIT_HELPER" ]; then
    wormhole --transit-helper "$WORMHOLE_TRANSIT_HELPER" "$@"
  else
    wormhole "$@"
  fi
}

function dighost() {
  local host="${1:-guero.top}"
  if [[ -n "$2" ]]; then
    dig +short "${host}" @"${2}"
  else
    dig +short "${host}"
  fi
}

function digip() {
  local ip="${1:-127.0.0.1}"
  if [[ -n "$2" ]]; then
    dig +short -x "${ip}" @"${2}"
  else
    dig +short "${ip}"
  fi
}

########################################################################
# development
########################################################################
function errno () {
  perl -MErrno -e 'my %e= map { Errno->$_()=>$_ } keys(%!); print grep !+/unknown error/i, map sprintf("%4d %-15s %s".$/,$_,$e{$_},$!=$_), 0..+127'
}

function cmdfu () {
  curl "https://www.commandlinefu.com/commands/matching/$@/$(echo -n $@ | openssl base64)/plaintext";
}

function cheat () {
  for var in "$@"; do
    curl cht.sh/"$var"
  done
}

function goog() {
  search=""
  for term in $*; do
    search="$search%20$term"
  done
  open "https://www.google.com/search?ie=utf-8&oe=utf-8&q=$search"
}

function googcli {
  Q="$@";
  GOOG_URL='https://www.google.com/search?tbs=li:1&q=';
  AGENT="Mozilla/4.0";
  stream=$(curl -A "$AGENT" -skLm 20 "${GOOG_URL}${Q//\ /+}" | grep -oP '\/url\?q=.+?&amp' | sed 's|/url?q=||; s|&amp||');
  echo -e "${stream//\%/\x}";
}

function wiki() {
  search=""
  for term in $*; do
    search="$search%20$term"
  done
  open "http://en.wikipedia.org/w/index.php?search=$search"
}

function stackoverflow() {
  search=""
  for term in $*; do
    search="$search%20$term"
  done
  open "http://stackoverflow.com/search?q=$search"
}

function urlencode() {
    # urlencode <string>
    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf "$c" ;;
            *) printf '%%%02X' "'$c"
        esac
    done
}

function urlencodeall() {
    # urlencodeall <string>
    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
        printf '%%%02X' "'$c"
    done
}

function urldecode() {
    # urldecode <string>

    local url_encoded="${1//+/ }"
    printf '%b' "${url_encoded//%/\\x}"
}

########################################################################
# system
########################################################################
function find_linux_root_device() {
  local PDEVICE=`stat -c %04D /`
  for file in $(find /dev -type b 2>/dev/null) ; do
    local CURRENT_DEVICE=$(stat -c "%02t%02T" $file)
    if [ $CURRENT_DEVICE = $PDEVICE ]; then
      ROOTDEVICE="$file"
      break;
    fi
  done
  echo "$ROOTDEVICE"
}

function rotationals() {
  for f in /sys/block/sd?/queue/rotational; do printf "$f is "; cat $f; done
}

function schedulers() {
  for f in /sys/block/sd?/queue/scheduler; do printf "$f is "; cat $f; done
}

function watch_file_size() {
  perl -e '
  $file = shift; die "no file [$file]" unless ((-f $file) || (-d $file));
  $isDir = (-d $file);
  $sleep = shift; $sleep = 1 unless $sleep =~ /^[0-9]+$/;
  $format = "%0.2f %0.2f\n";
  while(1){
    if ($isDir) {
      $size = `du -0scb $file`;
      $size =~ s/\s+.*//;
    } else {
      $size = ((stat($file))[7]);
    }
    $change = $size - $lastsize;
    printf $format, $size/1024/1024, $change/1024/1024/$sleep;
    sleep $sleep;
    $lastsize = $size;
  }' "$1" "$2"
}

function dux() {
  du -x --max-depth=1|sort -rn|awk -F / -v c=$COLUMNS 'NR==1{t=$1} NR>1{r=int($1/t*c+.5); b="\033[1;31m"; for (i=0; i<r; i++) b=b"#"; printf " %5.2f%% %s\033[0m %s\n", $1/t*100, b, $2}'|tac
}

function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function mountcrypt() {
  if [ "$1" ]; then
    if [ "$2" ]; then
      sudo /sbin/cryptsetup luksOpen "$1" "$2"
      pmount -A -e "/dev/mapper/$2"
    else
      echo "No map name specified">&2
    fi
  else
    echo "No file specified">&2
  fi
}

function umountcrypt() {
  if [ "$1" ]; then
    pumount "/media/mapper_$1"
  else
    echo "No map name specified">&2
  fi
}

function encrypt_file() {
  if [[ -n "$1" ]] && [[ -f "$1" ]]; then
    openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 1024 -salt -in "$1" -out "$1.enc" && \
      [[ -f "$1.enc" ]] && \
      ls -l "$1.enc" && \
      rm -vi "$1"
  else
    echo "No file specified, or invalid/nonexistant file" >&2
  fi
}

function decrypt_file() {
  if [[ -n "$1" ]] && [[ -f "$1" ]]; then
    OUT_FILE="$(echo "$1" | sed "s/\.enc$//")"
    if [ "$1" = "$OUT_FILE" ]; then
      OUT_FILE="$1.dec"
    fi
    openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 1024 -salt -d -in "$1" -out "$OUT_FILE" && \
      [[ -f "$OUT_FILE" ]] && \
      ls -l "$OUT_FILE" && \
      rm -vi "$1"
  else
    echo "No file specified, or invalid/nonexistant file" >&2
  fi
}

function dirtydev() {
  while true; do cat /sys/block/$1/stat|cols 9; grep -P "(Dirty)\b" /proc/meminfo; sleep 1; done
}

function cpuuse() {
  if [ "$1" ]; then
    SLEEPSEC="$1"
  else
    SLEEPSEC=1
  fi
   { cat /proc/stat; sleep "$SLEEPSEC"; cat /proc/stat; } | \
      awk '/^cpu / {usr=$2-usr; sys=$4-sys; idle=$5-idle; iow=$6-iow} \
      END {total=usr+sys+idle+iow; printf "%.2f\n", (total-idle)*100/total}'
}

function lsofpwd() {
  lsof -u "$USER" -a +D "$(pwd)" -a -d 0-65535 2>/dev/null | tail -n +2 | awk '{print $9}' | sort -u
}

function ddisousb() {
  if [ "$1" ] && [[ -r "$1" ]] ; then
    if [ "$2" ] && [[ -r "$2" ]] ; then
      DEV_DESC="$2 $(lsblk "$2" | sed -n 2p | awk '{ print $4 }') $(udevadm info --query=all -n "$2" | grep -P "(ID_VENDOR|ID_MODEL|ID_FS_LABEL|ID_BUS)=" | cols 2 | sed "s/.*=//" | tr '\n' ' ')"
      DEV_DESC="$(sed -e 's/[[:space:]]*$//' <<<${DEV_DESC})"
      read -p "This will overwrite $DEV_DESC, are you sure? " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "dd if=\"$1\" of=\"$2\" bs=4M status=progress oflag=sync"
        dd if="$1" of="$2" bs=4M status=progress oflag=sync
      fi
    else
      echo "No destination device specified">&2
    fi
  else
    echo "No iso file specified">&2
  fi
}

########################################################################
# language
########################################################################
function say() {
  MIMIC_URL="${MIMIC_URL:-http://localhost:59125}"
  MIMIC_VOICE="${MIMIC_VOICE:-en_US/vctk_low}"
  curl -sSL -XPOST --data "$1" --output - "${MIMIC_URL}/api/tts?voice=$(urlencode "${MIMIC_VOICE}")" | aplay 2>/dev/null
}

function saysel () {
  say "$(xsel)"
}

########################################################################
# media
########################################################################
function yt () {
  yt-dlp -o - "$1" | mpv -
}

function ytsel () {
  yt-dlp -o - "$(xsel)" | mpv -
}

function pytv() {
  yt-dlp -q --max-downloads 1 --no-playlist --default-search ${2:-ytsearch} "$1" -o - | mpv -
}

function pyt() {
  yt-dlp -f bestaudio -q --max-downloads 1 --no-playlist --default-search ${2:-ytsearch} "$1" -o - | mpv -vo null /dev/fd/3 3<&0 </dev/tty
}

function ytmusic() {
  format="$1"
  search="$2"
  quality="${3:-2}"
  if [[ "$search" =~ ^http ]]; then
    yt-dlp -f bestaudio --extract-audio --audio-format "$format" --audio-quality $quality -q --max-downloads 1 "$search"
  else
    yt-dlp -f bestaudio --extract-audio --audio-format "$format" --audio-quality $quality -q --max-downloads 1 --no-playlist --default-search ytsearch "$search"
  fi
}

function ytmp3() {
  ytmusic mp3 "$@"
}

function ytogg() {
  ytmusic vorbis "$@"
}

function ytsearch() {
  yt-dlp -F --max-downloads 1 --no-playlist --default-search ${2:-ytsearch} "$1"
}

function conv2mp4() {
  printf "%s\n" "$@" | xargs -r -P 4 -I XXX -r /bin/bash -c "ffmpeg -nostdin -y -i \"XXX\" -c:a aac -strict experimental -ac 2 -ab 192K -filter_complex \"scale=iw*min(1\,min(1280/iw\,720/ih)):-1\" -c:v libx264 -preset medium -crf 24 -movflags +faststart -threads 1 -loglevel 0 \"XXX.mp4\""
}

function conv2nook() {
  FINDARG="$1"
  printf "%s\n" "$@" | xargs -r -P 4 -I XXX -r /bin/bash -c "HandBrakeCLI -i \"XXX\" -e x264 -q 26.0 -r 30 --pfr -a 1 -E ffaac -B 192 -6 dpl2 -R Auto -D 0.0 --audio-copy-mask aac,ac3,dtshd,dts,mp3 --audio-fallback ffac3 -f mp4 -X 854 -Y 480 --loose-anamorphic --modulus 2 -m --x264-preset medium --h264-profile baseline --encoder-tune fastdecode --h264-level 3.0 -o \"XXX_nook.mp4\""
}

function brownnoise() {
  play -c2 -n synth pinknoise band -n 280 80 band -n 60 25 gain +20 treble +40 500 bass -3 20 flanger 4 2 95 50 .3 sine 50 lin
}

function noise() {
  brownnoise
}

function matrix() {
  while :;do echo $LINES $COLUMNS $(( $RANDOM % $COLUMNS)) $(printf "\U$(($RANDOM % 500))");sleep 0.05;done|gawk '{a[$3]=0;for (x in a){o=a[x];a[x]=a[x]+1;printf "\033[%s;%sH\033[2;32m%s",o,x,$4;printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,$4;if (a[x] >= $1){a[x]=0;} }}'
}

function media_history_purge() {
  for TERM in \
      1080p \
      720p \
      _clean \
      cleanvid \
      epub \
      ffmpeg \
      mediasus \
      mkv \
      monkeyplug \
      montag \
      mobi \
      movies \
      mp3 \
      mp4 \
      mpv \
      music \
      ogg \
      plex \
      RARBG\
      searchbot \
      season \
      srt \
      torrent \
      webrip \
      yify \
   ; do \
      while read n; do history -d $n; done < <(history | tac | awk "/${TERM}/{print \$1}" IGNORECASE=1); \
  done && history -w
}

########################################################################
# reference
########################################################################

########################################################################
# misc. shell/tmux/etc
########################################################################
function tmux() {
  TMUX="$(which tmux)"

  # this should prevent systemd from killing our tmux sessions when we log out
  ( command -v systemd-run >/dev/null 2>&1 && [ "$(uname -r 2>/dev/null | grep -c WSL)" -eq 0 ] ) && PARENTPROC="systemd-run --scope --user" || PARENTPROC=

  # old habits die hard, make "screen -l" and "screen -r" work the way I want them to for tmux

  if [ "$#" -eq 1 ] && ([ "$1" = "-list" ] || [ "$1" = "-l" ]); then
    shift
    "$TMUX" ls

  elif ([ "$#" -eq 1 ] || [ "$#" -ge 2 ]) && [ "$1" = "-r" ]; then
    shift
    if [ "$#" -eq 0 ]; then
      "$TMUX" ls >/dev/null 2>&1 && "$TMUX" attach || echo "No tmux sessions found"
    else
      SID="$1"; shift
      "$TMUX" attach -t "$SID" "$@"
    fi

  else
    $PARENTPROC "$TMUX" "$@"
  fi
}

function screen() {
  tmux "$@"
}

########################################################################
# things I want to nohup
########################################################################
function sublime() {
  if [ ! $MACOS ]; then
    export LANG=en_US.UTF-8
    export LC_CTYPE=en_US.UTF-8
    nohup "$(which subl)" "$@" </dev/null >/dev/null 2>&1 &
  else
    "$(which subl)" "$@"
  fi
}

function subl() {
  sublime "$@"
}

function rdp() {
  nohup "$(which rdesktop)" -g 1600x1024 -z -x m -P -r sound:off -0 $@ </dev/null >/dev/null 2>&1 &
}

function regexxer() {
  nohup "$(which regexxer)" $@ </dev/null >/dev/null 2>&1 &
}

function spice() {
  nohup "$(which spicy)" --uri="$(virsh -c qemu:///system domdisplay $1)" </dev/null >/dev/null 2>&1 &
}

function spiceport() {
  nohup "$(which spicy)" -h 127.0.0.1 -p "$1" </dev/null >/dev/null 2>&1 &
}

function wireshark() {
  nohup "$(which wireshark)" "$@" </dev/null >/dev/null 2>&1 &
}

function pithos() {
  nohup "$(which pithos)" "$@" </dev/null >/dev/null 2>&1 &
}

####
# work in progress
###
# find . -type f -exec bash -c "fuser -s '{}' || rm -vf '{}'" \;
