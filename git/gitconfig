[user]
	useconfigonly = true
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge --skip -- %f
  process = git-lfs filter-process --skip
  required = true
  batch = false
[credential]
  helper = /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret
[pull]
  rebase = true
  prune = true
  recurse-submodules = true
  autoStash = true
[push]
	default = simple
[diff]
  tool = xxdiff
  # tool = icdiff
[merge]
	tool = kdiff3
[difftool]
	prompt = false
[difftool "icdiff"]
  cmd = /usr/bin/icdiff --line-numbers $LOCAL $REMOTE
[pager]
  difftool = true
[core]
	editor = vi
	excludesfile = ~/.gitignore_global
[color]
	ui = true
	status = auto
	branch = auto
[gui]
  displayuntracked = false
[alias]
  # check out prior to a particular date on the current branch
  before = "!f() { BRNCH=$(git rev-parse --abbrev-ref HEAD) && REV=$(git rev-list -n 1 --before=\"$1\" $BRNCH) && echo "checking out $REV on $BRNCH before \"$1\"" && git co $REV; }; f"
  br = branch
  ci = commit
  cl = clone --depth=1 --single-branch --recurse-submodules --shallow-submodules --no-tags
  co = checkout
  ours = checkout --ours
  # branch then checkout
  cob = checkout -b
  cp = cherry-pick
  # new branch
  nb = "!f() { RMT=$(git branch -vv | grep \"^\\*\" | cut -d \"[\" -f2 | cut -d \"]\" -f1 | cut -d \"/\" -f1) && git checkout -b \"$1\" && git push -u \"$RMT\" \"$1\"; }; f"
  # run gitcheck script
  check = !gitcheck -v -r -a
  # show modified files in last commit
  last = !git ll -1
  # list commits not yet pushed
  np = cherry -v
  # shows commits from all branches which are not merged upstream (the non-current remote), plus the last commit in upstream
  noup = "!f() { RMT=$(git branch -vv | grep \"^\\*\" | cut -d \"[\" -f2 | cut -d \"]\" -f1 | cut -d \"/\" -f1) && UPS=$(git branch -vvr | grep -Pv \"^\\s*$RMT\" | cut -d \"/\" -f1 | sort -u | head -n 1 | tr -d \" \") && git log --graph --decorate --pretty=oneline --abbrev-commit --all @{$UPS}^..; }; f"
  # show local diffs with tool
  diffs = diff --staged
  xdiff = difftool
  xdiffs = difftool --staged
  # show cleaner in-line textual diff
  dif = diff --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+' --word-diff=plain
  difs = diff --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+' --word-diff=plain --staged
  # show visual diff for specified revision
  diffrev = "!f() { git difftool \"$1\"^..\"$1\"; }; f"
  # show visual diff for last commit
  difflast = difftool --cached HEAD^
  # show commits in one branch that aren\'t in another
  diffbranch = "!f() { git difftool \"$2\" ^\"$1\" --no-merges; }; f"
  diffbranchlog = "!f() { git log --left-right --graph --cherry-mark --oneline --no-merges \"$1\"^..\"$2\"; }; f"
  fdiffbranch = "!f() { git difftool \"$2\" ^\"$1\" --no-merges \"$3\"; }; f"
  branchlog = "!f() { git log \"$2\" ^\"$1\" --no-merges; }; f"
  # all subdirectories in current directory and their most recent commits/authors
  dirlog = "!find -maxdepth 1 -type d -not -iwholename '*.git*' | xargs -I {} bash -c 'printf \"%-20s %s \n\" \"{}\" \"$(git --no-pager log -1 --date=local --pretty='\"'%cd %h %cn'\"' -- {};)\"'"
  # show log for specified file
  filelog = log -u
  # find files with names matching pattern
  find = !git ls-files | grep -i
  # grep
  gr = grep -n -P -I -i
  # grep from root of working copy
  grtop = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -I -i -P -n $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
  # list aliases
  la = !git config -l | grep alias | cut -c 7-
  # last stash
  laststash = difftool stash@{0}^!
  # list files changed in a given revision
  lrev = "!f() { git ll \"$1\"^..\"$1\"; }; f"
  # list oneline commits showing relative dates
  ld = log --pretty=format:\"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]\" --decorate --date=relative
  # list oneline commits showing short dates
  lds = log --pretty=format:\"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]\" --decorate --date=short
  # list oneline commits showing no dates
  le = log --oneline --decorate
  ls = log --pretty=format:\"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]\" --decorate
  # list commits and files changed
  ll = log --pretty=format:\"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]\" --decorate --numstat
  # list/count extensions of tracked files
  ext = "!f() { BRNCH=$(git rev-parse --abbrev-ref HEAD) && git ls-tree -r \"$BRNCH\" --name-only | sed -n 's/..*\\.//p' | sort | uniq -c | sort -k1n; }; f"
  # list/count extensions of untracked files (excluding ignored files)
  extun = !git ls-files --others --exclude-standard | sed -n 's/..*\\.//p' | sort | uniq -c | sort -k1n
  # list/count extensions of untracked files (including ignored files)
  extuna = !git ls-files --others | sed -n 's/..*\\.//p' | sort | uniq -c | sort -k1n
  # merge, no commit, no ff
  mrg = merge --no-commit --no-ff
  # "git add" only modified files from this directory onward
  addmod = !git status --short --untracked-files=no --porcelain ${GIT_PREFIX:-./} | awk '/^[ MA]M/{print $2}' | xargs -rl git add -v
  # pull from upstream into this branch
  pullup = "!f() { RMT=$(git branch -vv | grep \"^\\*\" | cut -d \"[\" -f2 | cut -d \"]\" -f1 | cut -d \"/\" -f1) && UPS=$(git branch -vvr | grep -Pv \"^\\s*$RMT\" | cut -d \"/\" -f1 | sort -u | head -n 1 | tr -d \" \") && BRNCH=$(git rev-parse --abbrev-ref HEAD) && echo \"git pull $UPS $BRNCH\" && git pull \"$UPS\" \"$BRNCH\"; }; f"
  # commit adding all changes (but not to untracked files) with the message following this command
  save = commit -am
  # short status without untracked files
  st = !git status -s | grep -v ??
  # status without untracked files
  stat = status -uno
  # update submodules recursively
  sub = submodule update --recursive
  # move all submodule heads
  submove = submodule foreach --recursive git up
  # set-upstream to another branch and HARD RESET to that branch
  switchup = "!f() { BRNCH=$(git rev-parse --abbrev-ref HEAD) && git branch --set-upstream-to \"$1/$BRNCH\" && git reset --hard \"$1/$BRNCH\"; }; f"
  # reset the previous commit, but keeps all the changes from that commit in the working directory
  undo = reset HEAD~1 --mixed
  upp = "!bash -c '((git pull --rebase --autostash --recurse-submodules=yes \"$0\" \"$(git rev-parse --abbrev-ref HEAD)\") 3>&1 1>&2 2>&3 | grep -v \"to the list of known hosts\") 3>&1 1>&2 2>&3'"
  u = "!bash -c 'echo; gitcheck -v -r; echo; git up; echo; git status -u no; echo; gitcheck -v -r; echo'"
  ch = "!bash -c 'echo; gitcheck -v -r; echo'"
  # find and update all git repositories underneath the current directory
  upall = "!f() { find . -type d -name .git -print0 | xargs -r -0 -I XXX bash -c 'pushd \"XXX\"/../ >/dev/null 2>&1 && echo && printf '=%.0s' {1..60} && echo && pwd && ((git up; echo; git status -u no; echo; gitcheck -vr) | grep -Pv \"(Updating.*remotes|\\S+\\s+up to date|On branch\\s+\\S+|Fetching\\s+\\S+|Your branch is up to date|nothing to commit)\" | grep . ) && popd >/dev/null' ; }; f "
  # unstage
  unstage = reset HEAD --
  # upstream (the non-current remote) integrate
  upstreamintegrate = "!f() { RMT=$(git branch -vv | grep \"^\\*\" | cut -d \"[\" -f2 | cut -d \"]\" -f1 | cut -d \"/\" -f1) && UPS=$(git branch -vvr | grep -Pv \"^\\s*$RMT\" | cut -d \"/\" -f1 | sort -u | head -n 1 | tr -d \" \") && BRNCH=$(git rev-parse --abbrev-ref HEAD) && echo && gitcheck -v -r && echo && echo "git pull --no-rebase $UPS $BRNCH" && git pull --no-rebase $UPS $BRNCH && echo "git push $RMT $BRNCH" && git push $RMT $BRNCH && echo && gitcheck -v -r; }; f"
  # make a single-branch clone get all branches
  makedeep = "!f() { RMT=$(git branch -vv | grep \"^\\*\" | cut -d \"[\" -f2 | cut -d \"]\" -f1 | cut -d \"/\" -f1) && echo && git config remote."$RMT".fetch "+refs/heads/*:refs/remotes/$RMT/*" && git fetch "$RMT"; }; f"

  # change commit owner info
  change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "

